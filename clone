#include <unordered_map>
#include <vector>

class Node {
public:
    int val;
    std::vector<Node*> neighbors;
    Node() : val(0), neighbors() {}
    Node(int _val) : val(_val), neighbors() {}
    Node(int _val, std::vector<Node*> _neighbors) : val(_val), neighbors(_neighbors) {}
};

class Solution {
private:
    std::unordered_map<Node*, Node*> visited;

    Node* dfs(Node* node) {
        if (!node)
            return nullptr;

        if (visited.find(node) != visited.end())
            return visited[node];

        Node* clone = new Node(node->val);
        visited[node] = clone;

        for (Node* neighbor : node->neighbors) {
            clone->neighbors.push_back(dfs(neighbor));
        }

        return clone;
    }

public:
    Node* cloneGraph(Node* node) {
        return dfs(node);
    }
};
